@page "/ExpenseCategories"
@using FinancialPeace.Web.HttpClients
@using FinancialPeace.Web.Models
@using FinancialPeace.Web.Models.Requests
@inject ExpenseCategoriesHttpClient HttpClient
@inject IToastService ToastService

<div>
    <h1>Expense Categories</h1>
    @* *@
    @* <EditForm Model="@_addExpenseCategoryRequest"> *@
    @*     <DataAnnotationsValidator/> *@
    @* *@
    @*     <div class="input-group mb-3"> *@
    @*         <InputText class="form-control" placeholder="Expense category" @bind-Value="_addExpenseCategoryRequest.ExpenseCategoryName"/> *@
    @*         <div class="input-group-append"> *@
    @*             <button @onclick="AddExpenseCategoryAsync" class="btn btn-primary">Add expense category</button> *@
    @*         </div> *@
    @*     </div> *@
    @* </EditForm> *@
</div>

<br/>

<div>
    @if (_expenseCategories != null)
    {
        <table class="table">
            <thead>
            <tr>
                <th>Name</th>
            </tr>
            </thead>
            <tbody>
            <tr>
                <td>
                    <div class="input-group mb-3">
                        <input type="text" class="form-control" placeholder="Expense category" @bind="@_addExpenseCategoryRequest.ExpenseCategoryName"/>
                        <div class="input-group-append">
                            <button class="btn btn-success" @onclick="AddExpenseCategoryAsync">Submit</button>
                        </div>
                    </div>
                </td>
            </tr>
            @foreach (var category in _expenseCategories)
            {
                <tr>
                    <td>
                        <div class="input-group mb-3">
                            <input type="text" class="form-control" value="@category.ExpenseCategoryName" readonly />
                            <div class="input-group-append">
                                 <button class="btn btn-danger" @onclick="async () => await DeleteExpenseCategoryAsync(category.ExpenseCategoryId)">Remove</button>
                            </div>
                        </div>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    }
    else
    {
        <p>
            <em>Loading...</em>
        </p>
    }
</div>

@code {
    private IEnumerable<ExpenseCategory> _expenseCategories;
    private AddExpenseCategoryRequest _addExpenseCategoryRequest = new();

    protected override async Task OnInitializedAsync()
    {
        await GetExpenseCategoriesForUserAsync();
    }

    private async Task GetExpenseCategoriesForUserAsync()
    {
        _expenseCategories = await HttpClient.GetExpenseCategoriesForUserAsync();
    }

    private async Task AddExpenseCategoryAsync()
    {
        try
        {
            await HttpClient.AddExpenseCategoryAsync(_addExpenseCategoryRequest);
            ToastService.ShowSuccess("Expense category added successfully.");
            await GetExpenseCategoriesForUserAsync();
            _addExpenseCategoryRequest = new AddExpenseCategoryRequest();
        }
        catch
        {
            ToastService.ShowError("An error occurred while adding the expense category.");
        }
    }

    private async Task DeleteExpenseCategoryAsync(Guid expenseCategoryId)
    {
        try
        {
            await HttpClient.DeleteExpenseCategoryAsync(expenseCategoryId);
            ToastService.ShowSuccess("Expense category deleted successfully.");
            await GetExpenseCategoriesForUserAsync();
        }
        catch
        {
            ToastService.ShowError("An error occurred while deleting the expense category.");
        }
    }
}